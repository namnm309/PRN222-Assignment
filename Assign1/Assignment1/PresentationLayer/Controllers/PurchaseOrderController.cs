using Microsoft.AspNetCore.Mvc;
using BusinessLayer.Services;
using PresentationLayer.Models;
using DataAccessLayer.Enum;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace PresentationLayer.Controllers
{
    public class PurchaseOrderController : BaseDashboardController
    {
        private readonly IPurchaseOrderService _purchaseOrderService;
        private readonly IEVMReportService _evmService;
        private readonly AppDbContext _dbContext;

        public PurchaseOrderController(IPurchaseOrderService purchaseOrderService, IEVMReportService evmService, AppDbContext dbContext)
        {
            _purchaseOrderService = purchaseOrderService;
            _evmService = evmService;
            _dbContext = dbContext;
        }

        // TEMP: Action ƒë·ªÉ t·∫°o table PurchaseOrder
        [HttpGet]
        public async Task<IActionResult> CreatePurchaseOrderTable()
        {
            try
            {
                // Check if table exists first
                var tableExists = await _dbContext.Database.CanConnectAsync();
                if (!tableExists)
                {
                    TempData["Error"] = "‚ùå Cannot connect to database";
                    return RedirectToAction("Index", "Dashboard");
                }

                // Execute SQL to create table
                var sql = @"
                    CREATE TABLE IF NOT EXISTS ""PurchaseOrder"" (
                        ""Id"" uuid NOT NULL,
                        ""DealerId"" uuid NOT NULL,
                        ""ProductId"" uuid NOT NULL,
                        ""RequestedById"" uuid NOT NULL,
                        ""ApprovedById"" uuid NULL,
                        ""OrderNumber"" character varying(50) NOT NULL,
                        ""RequestedQuantity"" integer NOT NULL,
                        ""UnitPrice"" decimal(18,2) NOT NULL,
                        ""TotalAmount"" decimal(18,2) NOT NULL,
                        ""Status"" integer NOT NULL,
                        ""RequestedDate"" timestamp with time zone NOT NULL,
                        ""ApprovedDate"" timestamp with time zone NULL,
                        ""ExpectedDeliveryDate"" timestamp with time zone NULL,
                        ""ActualDeliveryDate"" timestamp with time zone NULL,
                        ""Reason"" character varying(500) NOT NULL,
                        ""Notes"" character varying(1000) NULL,
                        ""RejectReason"" character varying(500) NULL,
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        ""UpdatedAt"" timestamp with time zone NOT NULL,
                        CONSTRAINT ""PK_PurchaseOrder"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_PurchaseOrder_Dealer_DealerId"" FOREIGN KEY (""DealerId"") REFERENCES ""Dealer"" (""Id"") ON DELETE RESTRICT,
                        CONSTRAINT ""FK_PurchaseOrder_Product_ProductId"" FOREIGN KEY (""ProductId"") REFERENCES ""Product"" (""Id"") ON DELETE RESTRICT,
                        CONSTRAINT ""FK_PurchaseOrder_Users_RequestedById"" FOREIGN KEY (""RequestedById"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT,
                        CONSTRAINT ""FK_PurchaseOrder_Users_ApprovedById"" FOREIGN KEY (""ApprovedById"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT
                    );

                    CREATE INDEX IF NOT EXISTS ""IX_PurchaseOrder_DealerId"" ON ""PurchaseOrder"" (""DealerId"");
                    CREATE INDEX IF NOT EXISTS ""IX_PurchaseOrder_ProductId"" ON ""PurchaseOrder"" (""ProductId"");
                    CREATE INDEX IF NOT EXISTS ""IX_PurchaseOrder_RequestedById"" ON ""PurchaseOrder"" (""RequestedById"");
                    CREATE INDEX IF NOT EXISTS ""IX_PurchaseOrder_ApprovedById"" ON ""PurchaseOrder"" (""ApprovedById"");

                    INSERT INTO ""__EFMigrationsHistory"" (""MigrationId"", ""ProductVersion"")
                    VALUES ('20241002210000_AddPurchaseOrderEntity', '9.0.5')
                    ON CONFLICT (""MigrationId"") DO NOTHING;
                ";

                await _dbContext.Database.ExecuteSqlRawAsync(sql);
                
                TempData["Success"] = "‚úÖ PurchaseOrder table created successfully! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·∫°o ƒë∆°n ƒë·∫∑t h√†ng.";
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"‚ùå Failed to create table: {ex.Message}";
            }
            
            return RedirectToAction("Index", "Dashboard");
        }

        // TEMP: Action ƒë·ªÉ ki·ªÉm tra database
        [HttpGet]
        public async Task<IActionResult> CheckDatabase()
        {
            try
            {
                var canConnect = await _dbContext.Database.CanConnectAsync();
                if (!canConnect)
                {
                    TempData["Error"] = "‚ùå Cannot connect to database";
                    return RedirectToAction("Index", "Dashboard");
                }

                // Check if PurchaseOrder table exists
                var sql = "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'PurchaseOrder');";
                var tableExists = await _dbContext.Database.SqlQueryRaw<bool>(sql).FirstOrDefaultAsync();
                
                if (tableExists)
                {
                    TempData["Success"] = "‚úÖ Database connected. PurchaseOrder table exists.";
                    
                    // Try to query PurchaseOrder table
                    try
                    {
                        var purchaseOrders = await _purchaseOrderService.GetAllAsync();
                        TempData["Success"] += $" Found {purchaseOrders.Data.Count} records.";
                    }
                    catch (Exception ex)
                    {
                        TempData["Error"] = $"‚ùå Can query table but service failed: {ex.Message}";
                    }
                }
                else
                {
                    TempData["Error"] = "‚ùå PurchaseOrder table does not exist in database";
                }
            }
            catch (Exception ex)
            {
                TempData["Error"] = $"‚ùå Database check failed: {ex.Message}";
            }
            
            return RedirectToAction("Index", "Dashboard");
        }

        // TEMP: Action ƒë·ªÉ fix DealerId cho dealer account
        [HttpGet]
        public async Task<IActionResult> FixDealerAccount()
        {
            var userEmail = HttpContext.Session.GetString("UserEmail");
            var userRole = HttpContext.Session.GetString("UserRole");
            
            if (userRole != "DealerManager" && userRole != "DealerStaff")
            {
                TempData["Error"] = "Ch·ªâ dealer account m·ªõi c·∫ßn fix.";
                return RedirectToAction("Index", "Dashboard");
            }

            // L·∫•y dealer ƒë·∫ßu ti√™n trong database
            var dealers = await _evmService.GetAllDealersAsync();
            if (!dealers.Any())
            {
                TempData["Error"] = "Kh√¥ng c√≥ ƒë·∫°i l√Ω n√†o trong h·ªá th·ªëng. Vui l√≤ng t·∫°o ƒë·∫°i l√Ω tr∆∞·ªõc.";
                return RedirectToAction("Index", "Dashboard");
            }

            var firstDealer = dealers.First();
            
            // G√°n dealerId v√†o session
            HttpContext.Session.SetString("DealerId", firstDealer.Id.ToString());
            
            TempData["Success"] = $"‚úÖ ƒê√£ g√°n t√†i kho·∫£n {userEmail} v√†o ƒë·∫°i l√Ω: {firstDealer.Name}. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p 'ƒê·∫∑t xe t·ª´ h√£ng'.";
            
            return RedirectToAction("Index", "Dashboard");
        }

        [HttpGet]
        public async Task<IActionResult> Index(PurchaseOrderStatus? status = null)
        {
            var userRole = HttpContext.Session.GetString("UserRole");
            var dealerIdString = HttpContext.Session.GetString("DealerId");
            var userEmail = HttpContext.Session.GetString("UserEmail");

            // DEBUG: Th√™m th√¥ng tin debug
            Console.WriteLine($"[DEBUG] PurchaseOrder Index - UserRole: {userRole}, DealerId: {dealerIdString}, Email: {userEmail}");

            Guid? dealerIdFilter = null;

            // Dealer ch·ªâ xem ƒë∆°n c·ªßa m√¨nh, Admin/EVM xem t·∫•t c·∫£
            if (userRole == "DealerManager" || userRole == "DealerStaff")
            {
                if (string.IsNullOrEmpty(dealerIdString) || !Guid.TryParse(dealerIdString, out Guid dealerId))
                {
                    TempData["Error"] = $"T√†i kho·∫£n {userEmail} ch∆∞a ƒë∆∞·ª£c g√°n ƒë·∫°i l√Ω. DealerId trong session: {dealerIdString ?? "NULL"}. Vui l√≤ng li√™n h·ªá Admin ƒë·ªÉ g√°n dealer.";
                    TempData["Debug"] = $"üîç Debug: Role={userRole}, DealerId={dealerIdString ?? "NULL"}, Email={userEmail}";
                    return RedirectToAction("Index", "Dashboard");
                }
                dealerIdFilter = dealerId;
            }

            var (ok, err, purchaseOrders) = await _purchaseOrderService.GetAllAsync(dealerIdFilter, status);
            if (!ok)
            {
                TempData["Error"] = err;
            }

            ViewBag.Status = status;
            return View(purchaseOrders ?? new List<DataAccessLayer.Entities.PurchaseOrder>());
        }

        [HttpGet]
        public async Task<IActionResult> Detail(Guid id)
        {
            Console.WriteLine($"[DEBUG] PurchaseOrder Detail: Requesting ID = {id}");
            
            var (ok, err, purchaseOrder) = await _purchaseOrderService.GetAsync(id);
            Console.WriteLine($"[DEBUG] PurchaseOrder Detail: GetAsync result = Ok: {ok}, Error: {err}");
            
            if (!ok)
            {
                TempData["Error"] = err;
                return RedirectToAction(nameof(Index));
            }
            
            Console.WriteLine($"[DEBUG] PurchaseOrder Detail: Found order {purchaseOrder.OrderNumber}");

            // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
            var userRole = HttpContext.Session.GetString("UserRole");
            var dealerIdString = HttpContext.Session.GetString("DealerId");

            if (userRole == "DealerManager" || userRole == "DealerStaff")
            {
                if (string.IsNullOrEmpty(dealerIdString) || !Guid.TryParse(dealerIdString, out Guid dealerId))
                {
                    TempData["Error"] = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c g√°n ƒë·∫°i l√Ω.";
                    return RedirectToAction(nameof(Index));
                }

                if (purchaseOrder.DealerId != dealerId)
                {
                    TempData["Error"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n ƒë·∫∑t h√†ng n√†y.";
                    return RedirectToAction(nameof(Index));
                }
            }

            return View(purchaseOrder);
        }

        [HttpGet]
        public async Task<IActionResult> Create()
        {
            var userRole = HttpContext.Session.GetString("UserRole");
            var dealerIdString = HttpContext.Session.GetString("DealerId");

            // Ch·ªâ Dealer m·ªõi ƒë∆∞·ª£c t·∫°o ƒë∆°n ƒë·∫∑t h√†ng
            if (userRole != "DealerManager" && userRole != "DealerStaff")
            {
                TempData["Error"] = "Ch·ªâ Dealer Manager/Staff m·ªõi c√≥ quy·ªÅn ƒë·∫∑t xe t·ª´ h√£ng.";
                return RedirectToAction("Index", "Dashboard");
            }

            if (string.IsNullOrEmpty(dealerIdString) || !Guid.TryParse(dealerIdString, out Guid dealerId))
            {
                TempData["Error"] = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c g√°n ƒë·∫°i l√Ω. Vui l√≤ng li√™n h·ªá Admin.";
                return RedirectToAction("Index", "Dashboard");
            }

            await LoadProductsToViewBag();
            return View(new PurchaseOrderCreateViewModel());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(PurchaseOrderCreateViewModel model)
        {
            var userRole = HttpContext.Session.GetString("UserRole");
            var dealerIdString = HttpContext.Session.GetString("DealerId");
            var userIdString = HttpContext.Session.GetString("UserId");

            // Ki·ªÉm tra quy·ªÅn
            if (userRole != "DealerManager" && userRole != "DealerStaff")
            {
                TempData["Error"] = "Ch·ªâ Dealer Manager/Staff m·ªõi c√≥ quy·ªÅn ƒë·∫∑t xe t·ª´ h√£ng.";
                return RedirectToAction("Index", "Dashboard");
            }

            if (string.IsNullOrEmpty(dealerIdString) || !Guid.TryParse(dealerIdString, out Guid dealerId))
            {
                TempData["Error"] = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c g√°n ƒë·∫°i l√Ω.";
                return RedirectToAction("Index", "Dashboard");
            }

            if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out Guid userId))
            {
                TempData["Error"] = "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá.";
                return RedirectToAction("Index", "Dashboard");
            }

            if (!ModelState.IsValid)
            {
                await LoadProductsToViewBag();
                return View(model);
            }

            Console.WriteLine($"[DEBUG] Creating PurchaseOrder: DealerId={dealerId}, ProductId={model.ProductId}, UserId={userId}");
            Console.WriteLine($"[DEBUG] Quantity={model.RequestedQuantity}, UnitPrice={model.UnitPrice}, Reason={model.Reason}");

            var (ok, err, purchaseOrder) = await _purchaseOrderService.CreateAsync(
                dealerId, model.ProductId, userId, model.RequestedQuantity, model.UnitPrice,
                model.Reason, model.Notes, model.ExpectedDeliveryDate);

            Console.WriteLine($"[DEBUG] CreateAsync result: Ok={ok}, Error={err}");

            if (!ok)
            {
                ModelState.AddModelError("", $"Chi ti·∫øt l·ªói: {err}");
                TempData["Error"] = $"L·ªói t·∫°o ƒë∆°n: {err}";
                await LoadProductsToViewBag();
                return View(model);
            }

            TempData["Success"] = $"T·∫°o ƒë∆°n ƒë·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n: {purchaseOrder.OrderNumber}";
            return RedirectToAction(nameof(Detail), new { id = purchaseOrder.Id });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Cancel(Guid id)
        {
            var userRole = HttpContext.Session.GetString("UserRole");
            var dealerIdString = HttpContext.Session.GetString("DealerId");

            // Ki·ªÉm tra quy·ªÅn h·ªßy ƒë∆°n
            var (exists, err, purchaseOrder) = await _purchaseOrderService.GetAsync(id);
            if (!exists)
            {
                TempData["Error"] = err;
                return RedirectToAction(nameof(Index));
            }

            // Dealer ch·ªâ ƒë∆∞·ª£c h·ªßy ƒë∆°n c·ªßa m√¨nh
            if (userRole == "DealerManager" || userRole == "DealerStaff")
            {
                if (string.IsNullOrEmpty(dealerIdString) || !Guid.TryParse(dealerIdString, out Guid dealerId))
                {
                    TempData["Error"] = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c g√°n ƒë·∫°i l√Ω.";
                    return RedirectToAction(nameof(Index));
                }

                if (purchaseOrder.DealerId != dealerId)
                {
                    TempData["Error"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n ƒë·∫∑t h√†ng n√†y.";
                    return RedirectToAction(nameof(Index));
                }
            }

            var (ok, cancelErr, canceledOrder) = await _purchaseOrderService.CancelAsync(id);
            if (!ok)
            {
                TempData["Error"] = cancelErr;
            }
            else
            {
                TempData["Success"] = "H·ªßy ƒë∆°n ƒë·∫∑t h√†ng th√†nh c√¥ng!";
            }

            return RedirectToAction(nameof(Detail), new { id });
        }

        // Admin/EVM actions
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Approve(Guid id, DateTime? expectedDeliveryDate = null, string notes = "")
        {
            if (!IsAdmin())
            {
                TempData["Error"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát ƒë∆°n ƒë·∫∑t h√†ng.";
                return RedirectToAction(nameof(Index));
            }

            var userIdString = HttpContext.Session.GetString("UserId");
            if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out Guid userId))
            {
                TempData["Error"] = "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá.";
                return RedirectToAction(nameof(Index));
            }

            var (ok, err, approvedOrder) = await _purchaseOrderService.ApproveAsync(id, userId, expectedDeliveryDate, notes);
            if (!ok)
            {
                TempData["Error"] = err;
            }
            else
            {
                TempData["Success"] = "Duy·ªát ƒë∆°n ƒë·∫∑t h√†ng th√†nh c√¥ng!";
            }

            return RedirectToAction(nameof(Detail), new { id });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Reject(Guid id, string rejectReason)
        {
            if (!IsAdmin())
            {
                TempData["Error"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi ƒë∆°n ƒë·∫∑t h√†ng.";
                return RedirectToAction(nameof(Index));
            }

            var userIdString = HttpContext.Session.GetString("UserId");
            if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out Guid userId))
            {
                TempData["Error"] = "Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá.";
                return RedirectToAction(nameof(Index));
            }

            if (string.IsNullOrWhiteSpace(rejectReason))
            {
                TempData["Error"] = "Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi.";
                return RedirectToAction(nameof(Detail), new { id });
            }

            var (ok, err, rejectedOrder) = await _purchaseOrderService.RejectAsync(id, userId, rejectReason);
            if (!ok)
            {
                TempData["Error"] = err;
            }
            else
            {
                TempData["Success"] = "T·ª´ ch·ªëi ƒë∆°n ƒë·∫∑t h√†ng th√†nh c√¥ng!";
            }

            return RedirectToAction(nameof(Detail), new { id });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> UpdateStatus(Guid id, PurchaseOrderStatus status, DateTime? actualDeliveryDate = null)
        {
            if (!IsAdmin())
            {
                TempData["Error"] = "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ƒë·∫∑t h√†ng.";
                return RedirectToAction(nameof(Index));
            }

            var (ok, err, updatedOrder) = await _purchaseOrderService.UpdateStatusAsync(id, status, actualDeliveryDate);
            if (!ok)
            {
                TempData["Error"] = err;
            }
            else
            {
                TempData["Success"] = "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!";
            }

            return RedirectToAction(nameof(Detail), new { id });
        }

        private async Task LoadProductsToViewBag()
        {
            var products = await _evmService.GetAllProductsAsync();
            ViewBag.Products = products;
        }
    }
}
